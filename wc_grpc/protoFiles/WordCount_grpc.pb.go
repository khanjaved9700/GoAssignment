// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protoFiles/WordCount.proto

package protoFiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordCountServiceClient is the client API for WordCountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordCountServiceClient interface {
	WordCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type wordCountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordCountServiceClient(cc grpc.ClientConnInterface) WordCountServiceClient {
	return &wordCountServiceClient{cc}
}

func (c *wordCountServiceClient) WordCount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protoFiles.WordCountService/WordCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordCountServiceServer is the server API for WordCountService service.
// All implementations must embed UnimplementedWordCountServiceServer
// for forward compatibility
type WordCountServiceServer interface {
	WordCount(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedWordCountServiceServer()
}

// UnimplementedWordCountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWordCountServiceServer struct {
}

func (UnimplementedWordCountServiceServer) WordCount(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WordCount not implemented")
}
func (UnimplementedWordCountServiceServer) mustEmbedUnimplementedWordCountServiceServer() {}

// UnsafeWordCountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordCountServiceServer will
// result in compilation errors.
type UnsafeWordCountServiceServer interface {
	mustEmbedUnimplementedWordCountServiceServer()
}

func RegisterWordCountServiceServer(s grpc.ServiceRegistrar, srv WordCountServiceServer) {
	s.RegisterService(&WordCountService_ServiceDesc, srv)
}

func _WordCountService_WordCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCountServiceServer).WordCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoFiles.WordCountService/WordCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCountServiceServer).WordCount(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// WordCountService_ServiceDesc is the grpc.ServiceDesc for WordCountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordCountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoFiles.WordCountService",
	HandlerType: (*WordCountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WordCount",
			Handler:    _WordCountService_WordCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoFiles/WordCount.proto",
}
